<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://daveyoon64.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://daveyoon64.github.io//" rel="alternate" type="text/html" hreflang="en-US" /><updated>2020-11-07T19:34:56+00:00</updated><id>https://daveyoon64.github.io//feed.xml</id><title type="html">Davey On The Tech</title><subtitle>Software Engineer in California writing about software, web dev, and machine learning </subtitle><author><name>daveyoon64</name><email>your-email@email.com</email></author><entry><title type="html">The truth about truthy falsey</title><link href="https://daveyoon64.github.io//truthy_falsey/" rel="alternate" type="text/html" title="The truth about truthy falsey" /><published>2020-11-05T18:00:47+00:00</published><updated>2020-11-05T18:00:47+00:00</updated><id>https://daveyoon64.github.io//truthy_falsey</id><content type="html" xml:base="https://daveyoon64.github.io//truthy_falsey/">&lt;h2 id=&quot;ive-learned-a-lot-from-reading-open-source-projects&quot;&gt;I’ve learned a lot from reading open source projects!&lt;/h2&gt;
&lt;p&gt;Sometimes, I run into dense lines with a lot of information packed inside…&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charCodeAt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The function name gives us a hint that that function checks if an object is a string or not. But what the heck does the rest of it mean?&lt;/p&gt;

&lt;h2 id=&quot;checking-for-blank-strings&quot;&gt;Checking for blank strings&lt;/h2&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We have to check is obj is a blank string. Why? &lt;code class=&quot;highlighter-rouge&quot;&gt;''&lt;/code&gt; is a blank string and a falsey value in JavaScript.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// quick check that '' is falsey&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'false'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// writes `false` to the console&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;''&lt;/code&gt; is a string, we want to return &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;chaining--aka-or&quot;&gt;Chaining || aka or&lt;/h2&gt;
&lt;p&gt;In JavaScript, the &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt; operator evaluates the left and right side’s truthy and falsey values in the following order:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;If the left side is truthy, return that value.&lt;/li&gt;
  &lt;li&gt;If the left side is falsey, return the value on the right side.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In other words, as it evaluates left to right, it’s trying to find &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; or truthy as soon as possible.&lt;/p&gt;

&lt;h2 id=&quot;obj&quot;&gt;obj?&lt;/h2&gt;
&lt;p&gt;This checks to see if &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt; exists and is truthy.&lt;/p&gt;

&lt;h2 id=&quot;objcharcodeat&quot;&gt;obj.charCodeAt?&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;charCodeAt()&lt;/code&gt; takes an integer index and returns a UTF-16 value representing the character.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dave'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// returns 100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If there’s no argument, then it defaults to 0. 
So if &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt; is a string, the 0th character should be truthy.&lt;/p&gt;

&lt;h2 id=&quot;objsubstr&quot;&gt;obj.substr?&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;substr()&lt;/code&gt; normally returns a substring, but in this case since there are no arguments, it’ll return truthy if &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt; is a string or &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; otherwise, another falsey value.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'dave'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// write 'true' to console&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;chaining--aka-and&quot;&gt;Chaining &amp;amp;&amp;amp; aka and&lt;/h2&gt;
&lt;p&gt;In JavaScript, the &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt; operator evaluates the left and right side’s truthy and falsey values in the following order:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;If the left side is falsey, return that value.&lt;/li&gt;
  &lt;li&gt;If the left side is truthy, return the value on the right side.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In other words, as it evaluates left to right, it’s trying to find &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; or falsey as soon as possible.&lt;/p&gt;

&lt;h2 id=&quot;so-the-right-side-is-saying-what&quot;&gt;So the right side is saying what?&lt;/h2&gt;
&lt;p&gt;So if it exists, the first character has a UTF-16 code, and &lt;code class=&quot;highlighter-rouge&quot;&gt;substr()&lt;/code&gt; returns true, it’s a string!&lt;/p&gt;

&lt;h2 id=&quot;and-finally-the-&quot;&gt;And finally, the !!&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!!&lt;/code&gt; converts a truthy or falsey value to its boolean value. Truthy becomes true and falsey becomes false.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr&quot;&gt;MDN String.prototype.substr&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt&quot;&gt;MDN String.prototype.charCodeAt&lt;/a&gt;&lt;/p&gt;</content><author><name>daveyoon64</name><email>your-email@email.com</email></author><category term="blog" /><category term="javascript" /><category term="truthy" /><category term="falsey" /><summary type="html">I’ve learned a lot from reading open source projects! Sometimes, I run into dense lines with a lot of information packed inside…</summary></entry><entry><title type="html">The new operator in JavaScript</title><link href="https://daveyoon64.github.io//new_constructor/" rel="alternate" type="text/html" title="The new operator in JavaScript" /><published>2020-09-16T23:16:47+00:00</published><updated>2020-09-16T23:16:47+00:00</updated><id>https://daveyoon64.github.io//new_constructor</id><content type="html" xml:base="https://daveyoon64.github.io//new_constructor/">&lt;h2 id=&quot;why-do-you-need-to-use-the-operator-when-creating-an-object&quot;&gt;Why do you need to use the operator when creating an object?&lt;/h2&gt;
&lt;p&gt;I had always taken for granted the operator &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; in various languages. So I decided to dig a little deeper to see what it actually does in JavaScript.
Take for example, this JavaScript object, &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superlative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;superlative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superlative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, what happens if I don’t use &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;?&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Dave'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'awesome'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// what is user?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; in this case will be &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;. Why?&lt;/p&gt;

&lt;p&gt;Running the good ol’ Chrome debugger quickly tells us what’s up.
&lt;img src=&quot;/assets/img/windowperson.jpg&quot; alt=&quot;There's no `this` binding, so the implicit context will be window!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since we didn’t bind &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;, the JavaScript runtime will bind it to &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;, the default context.
In other words, you’ll simply add the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;superlative&lt;/code&gt; properties to the &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; object.&lt;/p&gt;

&lt;h2 id=&quot;lets-try-the-new-operator&quot;&gt;Let’s try the &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; operator…&lt;/h2&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newuser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Dave'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'awesome'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// newuser now returns...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Person {name: &quot;dave&quot;, superlative: &quot;kinda awesome&quot;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It properly returns an object! But how? The &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; operator does this for us &lt;strong&gt;under-the-hood&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superlative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// this = {}; &amp;lt;------ new operator&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;superlative&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;superlative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// return this; &amp;lt;---- new operator&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So now you’ll get the JavaScript object with the &lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt; you expect. By using 
&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;, the function &lt;code class=&quot;highlighter-rouge&quot;&gt;Person&lt;/code&gt; now acts as a &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new&quot;&gt;Link to MDN documents&lt;/a&gt;&lt;/p&gt;</content><author><name>daveyoon64</name><email>your-email@email.com</email></author><category term="blog" /><category term="javascript" /><category term="new" /><category term="operator" /><summary type="html">Why do you need to use the operator when creating an object? I had always taken for granted the operator new in various languages. So I decided to dig a little deeper to see what it actually does in JavaScript. Take for example, this JavaScript object, Person. function Person(name, superlative) { this.name = name; this.superlative = superlative; }</summary></entry><entry><title type="html">How to read the syntax section in the Javascript docs</title><link href="https://daveyoon64.github.io//how_to_read_js_api_syntax/" rel="alternate" type="text/html" title="How to read the syntax section in the Javascript docs" /><published>2020-08-13T18:00:47+00:00</published><updated>2020-08-13T18:00:47+00:00</updated><id>https://daveyoon64.github.io//how_to_read_js_api_syntax</id><content type="html" xml:base="https://daveyoon64.github.io//how_to_read_js_api_syntax/">&lt;h2 id=&quot;ive-always-wondered-how-to-read-the-syntax-portions-of-apis&quot;&gt;I’ve always wondered how to read the syntax portions of APIs&lt;/h2&gt;
&lt;p&gt;Admittedly I used to skip this portion of the API, opting to go straight for the code examples. Thought I’d learn how to read it properly now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;From MDN, syntax for Array.prototype.forEach()&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;arr&lt;/em&gt;&lt;/strong&gt;.forEach&lt;strong&gt;&lt;em&gt;(callback(currentValue [, index [, array]])[, thisArg])&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;The unitalicized forEach is a literal. Everything else means we’re substituing with our own values.&lt;/li&gt;
  &lt;li&gt;[…] means the argument is optional&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So in this example, all we need is an array and a callback function with a currentValue parameter to use forEach().&lt;/p&gt;

&lt;h3 id=&quot;tldr-for-how-to-read-api-syntax&quot;&gt;TL;DR for how to read API syntax&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Underlined words or unitalicized words are considered literals, and are typed just as they appear.&lt;/li&gt;
  &lt;li&gt;Square brackets ( &lt;strong&gt;[ ]&lt;/strong&gt; ) around an argument indicate that the argument is optional.&lt;/li&gt;
  &lt;li&gt;Ellipses ( &lt;strong&gt;…&lt;/strong&gt; ) are used to show that the previous argument-prototype may be repeated.&lt;/li&gt;
  &lt;li&gt;An argument beginning with a minus sign ( &lt;strong&gt;-&lt;/strong&gt; ) is often taken to mean some sort of flag argument even if it appears in a position where a file name could appear.&lt;/li&gt;
  &lt;li&gt;A comma (,) means if you use an optional arg, it needs to be separated with a comma.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/10925478/how-to-interpret-api-documentation-function-parameters&quot;&gt;Link to StackOverflow&lt;/a&gt;&lt;/p&gt;</content><author><name>daveyoon64</name><email>your-email@email.com</email></author><category term="blog" /><category term="javascript" /><category term="syntax" /><category term="API" /><summary type="html">I’ve always wondered how to read the syntax portions of APIs Admittedly I used to skip this portion of the API, opting to go straight for the code examples. Thought I’d learn how to read it properly now.</summary></entry></feed>